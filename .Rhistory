for (row in 1:3){
sample1 = d[row,11]
print(as.list(strsplit(sample1, ',')))
}
sample1
sample1[1]
typeof(sample1)
typeof("safsdf")
sample1+1
str(sample1)
names(sample1)=NULL
sample1
library("rjson")
d = read.table(file = '/Users/rerleman/Dropbox/My Mac (CCI00BHV2JALT)/Documents/distributions2.tsv', sep = '\t', header = FALSE)
for (row in 1:3){
sample1 = d[row,11]
print(as.list(strsplit(sample1, ',')))
}
sample1
d[1,9]
d[1,10]
dim(d)
levels(d[1,11])
d[1]
d[,1]
d[1,:]
d[1,]
d[2,]
d[2,11]
as.list(d[2,11])
str(d[2,11])
d = read.table(file = '/Users/rerleman/Dropbox/My Mac (CCI00BHV2JALT)/Documents/distributions2.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
str(d[2,11])
d[2,11]
for (row in 1:3){
sample1 = d[row,11]
print(as.list(strsplit(sample1, ',')))
}
for (row in 2:5){
sample1 = as.list(strsplit(d[row,11], ','))
sample2 = as.list(strsplit(d[row,12], ','))
print(sample2)
}
sample2[3]
for (row in 2:5){
sample1 = strsplit(d[row,11], ',')
sample2 = strsplit(d[row,12], ',')
print(sample2)
}
sample2[3]
sample2[1]
for (row in 2:5){
sample1 = strsplit(d[row,11], ',')[1]
sample2 = strsplit(d[row,12], ',')[1]
print(sample2)
}
sample2[3]
typeof(sample2)
as.vector(sample2)
as.vector(sample2)[3]
for (row in 2:5){
sample1 = strsplit(d[row,11], ',')[[1]]
sample2 = strsplit(d[row,12], ',')[[1]]
print(sample2)
}
sample2[3]
nrow(d)
for (row in 2:10{
sample1 = strsplit(d[row,11], ',')[[1]]
sample2 = strsplit(d[row,12], ',')[[1]]
print(chisq.test(sample1,sample2)
}
for (row in 2:10{
sample1 = strsplit(d[row,11], ',')[[1]]
sample2 = strsplit(d[row,12], ',')[[1]]
print(chisq.test(sample1,sample2))
}
for (row in 2:10){
sample1 = strsplit(d[row,11], ',')[[1]]
sample2 = strsplit(d[row,12], ',')[[1]]
print(chisq.test(sample1,sample2))
}
sample1
sample 2
sample2
table(sample1,sample2)
table(sample1)
table(c(sample1,sample2))
table()
table
table(sample1,sample2)
table(sample1,sample2, useNA="always")
table(sample1,sample2, useNA="ifany")
dataframe(sample1)
data.frame(sample1)
data.frame(sample1, sample2)
Freq(table1)
freq(table1)
frequency(sample1)
data.tables(table(sample1),table(sample2))
cbind(table(sample1),table(sample2))
rbind(table(sample1),table(sample2))
merge(table(sample1), table(sample2), all=TRUE)
table(sample1, sample2)
length(sample2)-length(sample1)
length(sample1)
c(sapply(x, function(x) c(rep(NA,66),sample1)))
c(sapply(x, function(sample1) c(rep(NA,66),sample1)))
c(sapply(sample1, function(x) c(rep(NA,66),x)))
sample1=c(sapply(sample1, function(x) c(rep(NA,66),x)))
table(sample1,sample2)
length(sample1)
for (row in 2:10){
sample1 = strsplit(d[row,11], ',')[[1]]
sample2 = strsplit(d[row,12], ',')[[1]]
print(chisq.test(sample1,sample2))
}
length(sample1)
length(sample2)
sample1=c(sapply(sample1, function(x) c(rep(NA,66),x)))
length(sample1)
for (row in 2:10){
sample1 = strsplit(d[row,11], ',')[[1]]
sample2 = strsplit(d[row,12], ',')[[1]]
print(chisq.test(sample1,sample2))
}
c(sapply(sample1, function(x) c(rep(NA,66),x)))
c(sapply(sample1, function(x) c(rep(NA,33),x)))
sample1=c(sapply(sample1, function(x) c(rep(NA,33),x)))
length(sample1)
table(sample1,sample2)
table(c(sample1,sample2))
chisq.test(sample1,sample2)
fisher.test(sample1,sample2)
unique(c('a','a'))
x = c(1,2,3)
y = c(2,3)
c(x,y)
x,y
list(x,y)
x
count(x,1)
length(x==1)
length(x=1)
x=c(x,1,1)
length(x=1)
x
length(x[x==1])
obsexp = function(x,y){
all = unique(c(x,y))
obs = c()
exp = c()
for (el in all){
obs = c(obs,length(x[x==el]))
exp = c(exp,length(y[y==el]))
}
return(list(obs,exp))
}
sample1
sample2
obsexp(sample1,sample2)
obsexp = function(cluster,db){
all = unique(c(cluster,db))
obs = c()
exp = c()
for (el in all){
print(el)
obs = c(obs,length(cluster[cluster==el]))
exp = c(exp,length(db[db==el]))
}
return(list(obs,exp))
}
obsexp(sample1,sample2)
sample[sample=="gc-tof"]
sample1[sample1=="gc-tof"]
length(sample1[sample1=="gc-tof"])
for (row in 2:10){
sample1 = strsplit(d[row,11], ',')[[1]]
sample2 = strsplit(d[row,12], ',')[[1]]
print(chisq.test(sample1,sample2))
}
sample1
obsexp(sample1,sample2)
length(sample2[sample2=="gc-tof"])
obsexp(sample1,sample2)[1]
obsexp = function(cluster,db){
all = unique(c(cluster,db))
obs = c()
exp = c()
for (el in all){
obs = c(obs,length(cluster[cluster==el]))
exp = c(exp,length(db[db==el]))
}
return(list(obs,exp))
}
obsexp(sample1,sample2)[1]
obsexp(sample1,sample2)[[1]]
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]
}
obs
exp
chisq.test(obs,exp)
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]\length(db)
}
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]\length(db)
}
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]/length(db)
}
exp
sum(exp)
chisq.test(obs,exp)
chisq.test(obs,p=3xp)
chisq.test(obs,p=exp)
chisq.test(obs,p=exp,simulate.p.value = TRUE)
chisq.test(obs,p=exp,simulate.p.value = TRUE)$p.value
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]/length(db)
print(chisq.test(obs,p=exp,simulate.p.value = TRUE)$p.value)
}
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]
print(fisher.test(obs,exp)
}
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]
print(fisher.test(obs,exp))
}
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]
print(fisher.test(obs,exp)p.value)
}
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]
print(fisher.test(obs,exp)$p.value)
}
for (row in 2:10){
cluster = strsplit(d[row,11], ',')[[1]]
db = strsplit(d[row,12], ',')[[1]]
conttable = obsexp(cluster,db)
obs = conttable[[1]]
exp = conttable[[2]]/length(db)
print(chisq.test(obs,p=exp,simulate.p.value = TRUE)$p.value)
}
nrows(d)
nrow(D)
nrow(d)
d[1,13]
d[1,13]=1
head(d)
write.table(d, file = '/Users/rerleman/Dropbox/My Mac (CCI00BHV2JALT)/Documents/distributions2.1.tsv', sep = '\t')
d = d[-13]
head(d)
d = d[-c(11,12)]
head(d)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-3D/cluster_gof_chitest.R', echo=TRUE)
row
head(d)
d = d[-c(11,12)]
head(d)
write.table(d, file = '/Users/rerleman/Dropbox/My Mac (CCI00BHV2JALT)/Documents/distributions2.1.tsv', sep = '\t')
d[1,5]
d[1,13]
d[1,11]
d[2,11]
d[1,11] = 'Chi square bootstrap p-value'
write.table(d, file = '/Users/rerleman/Dropbox/My Mac (CCI00BHV2JALT)/Documents/distributions2.1.tsv', sep = '\t', header=FALSE)
d[1,11] = 'Chi square bootstrap p-value'
write.table(d, file = '/Users/rerleman/Dropbox/My Mac (CCI00BHV2JALT)/Documents/distributions2.1.tsv', sep = '\t')
head(d)
d = d[-10]
head(d)
write.table(d, file = '/Users/rerleman/Dropbox/My Mac (CCI00BHV2JALT)/Documents/distributions2.1.tsv', sep = '\t')
plot(d[9,11])
plot(d[6,10])
plot(d[6],d[10])
length(d[6])
d[,6]
plot(d[,6],d[,10])
plot(d[,6],d[,10], xlab='Asymptotic Chi-square', ylab='Bootstrap Chi-square')
plot(x, dd1, ylim = c(0,14))
dd1 = c(6,4,3,3,2,10)
dd2 = c(3.9, 3.3, 2.9, 2.5, 2.1, 13.3)
dd3 = c(5, 3.9, 3.1, 2.5, 2, 11.5)
dd4 = c(6, 3.6, 2.7, 2.2, 1.8, 11.7)
x = c(0,1,2,3,4,5)
plot(x, dd1, ylim = c(0,14))
plot(x, dd1, ylim = c(0,14), lty = 1)
plot(x, dd1, ylim = c(0,14), lty = 1)
lines(x, dd1, ylim = c(0,14))
lines(x, dd1, ylim = c(0,14), col="black")
dd1 = c(6,4,3,3,2,10)
dd2 = c(3.9, 3.3, 2.9, 2.5, 2.1, 13.3)
dd3 = c(5, 3.9, 3.1, 2.5, 2, 11.5)
dd4 = c(6, 3.6, 2.7, 2.2, 1.8, 11.7)
x = c(0,1,2,3,4,5)
lines(x, dd1, ylim = c(0,14), col="black")
par(new = TRUE)
lines(x, dd2, ylim = c(0,14), col="blue")
par(new = TRUE)
lines(x, dd3, ylim = c(0,14), col="red")
par(new = TRUE)
lines(x, dd4, ylim = c(0,14), col="green")
lines(x, dd1, ylim = c(0,14), col="black", xlab = '', ylab='')
par(new = TRUE)
lines(x, dd1, ylim = c(0,14), col="black", xlab = '', ylab='')
lines(x, dd1, ylim = c(0,14), col="black", xlab = '', ylab='')
lines(x, dd1, ylim = c(0,14), col="black", xlab = '', ylab='')
lines(x, dd1, ylim = c(0,14), col="black", xlab = '', ylab='')
plot(x, dd1, ylim = c(0,14), col="black", xlab = '', ylab='')
lines(x, dd1, ylim = c(0,14), col="black", xlab = '', ylab='')
lines(x, dd2, ylim = c(0,14), col="blue")
lines(x, dd3, ylim = c(0,14), col="red")
lines(x, dd4, ylim = c(0,14), col="green")
plot(d[,6],d[,10], xlab='Asymptotic Chi-square', ylab='Bootstrap Chi-square')
plot(rgeom(1000,0.5))
plot(rpois(1000,0.5))
plot(rgeom(1000,0.5))
plot(rgeom(1000,0.9))
plot(rgeom(1000,2))
plot(rgeom(1000,0.5))
plot(rpois(1000,5))
plot(rpois(1000,2))
plot(rpois(1000,3))
hash("afsd")
library(hash)
install.packages(hash)
install.packages('hash')
library(hash)
hash("hashasd")
library(digest)
install.packages("digest")
library(digest)
digest("dsfsdf")
digest2int("dsfsdf")
x = c(x,x,x,x,y,y,y,z,z)
x = c("x", "x", "x", "y", "y", "y", "y", "z", "z", "z")
digest2int(x)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
res
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
res
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
testmat = as.dist(JSmat(data), method = "average")
stmat, method = "average")
clusters = hclust(testmat, method = "average")
#Dendrogram
#plot(clusters, ylab = "JS distance", xlab = "Cluster samples species")
res = pcoa(testmat)
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab="1. principal coordinate", ylab="2. principal coordinate")
#plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab="1. principal coordinate", ylab="2. principal coordinate")
plot(res$vectors[,1], res$vectors[,3],pch=20, col=cutree(clusters,3), xlab="1. principal coordinate", ylab="3. principal coordinate")
#plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab="1. principal coordinate", ylab="2. principal coordinate")
#plot(res$vectors[,1], res$vectors[,3],pch=20, col=cutree(clusters,3), xlab="1. principal coordinate", ylab="3. principal coordinate")
plot(res$vectors[,2], res$vectors[,3],pch=20, col=cutree(clusters,3), xlab="3. principal coordinate", ylab="3. principal coordinate")
res
var(res$vectors[,1])
var(res$vectors[,2])
var(res$vectors[,3])
var(res$vectors[,1])/149
res$values$Relative_eig
res$values$Relative_eig[1,1]
res$values$Relative_eig[1]
res$values$Relative_eig[1]/149
PC1var = res$values$Relative_eig[1]/res$trace
PC1var
PC1var = 100*res$values$Relative_eig[1]/res$trace
PC1(var)
PC1var
PC3var = 100*res$values$Relative_eig[3]/res$trace
PC2var = 100*res$values$Relative_eig[2]/res$trace
PC2var
PC3var
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab="1. principal coordinate", ylab="2. principal coordinate")
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
install.packages("plot3d")
install.packages("plot3D")
library(plot3D)
install.packages("misc3d")
library(misc3d)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab="1. PCo (" + PC1var + ")", ylab="2. principal coordinate")
str(34)
as.string("df","fd")
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab=paste("1. PCo (",PC1var,")"), ylab="2. principal coordinate")
#Variance explained by the PCoA
PC1var = 100*res$values$Relative_eig[1]/res$trace
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab=paste("1. PCo (",PC1var,")"), ylab="2. principal coordinate")
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab=paste("1. PCo (",as.string(PC1var),")"), ylab="2. principal coordinate")
as.string(PC1var)
tostring(PC1var)
toString(PC1var)
PC1var
PC2var
#Dendrogram
#plot(clusters, ylab = "JS distance", xlab = "Cluster samples species")
res = pcoa(testmat )
#Variance explained by the PCoA
PC1var = 100*res$values$Relative_eig[1]/res$trace
PC1var
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab=paste("1. PCo (", as.string(PC1var),")"), ylab="2. principal coordinate")
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab=paste("1. PCo (", toString(PC1var),")"), ylab="2. principal coordinate")
#Variance explained by the PCoA
PC1var = format(round(100*res$values$Relative_eig[1]/res$trace,2), nsmall=2)
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab=paste("1. PCo (", toString(PC1var),")"), ylab="2. principal coordinate")
PC2var = 100*res$values$Relative_eig[2]/res$trace
PC2var
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab="1. PCo", ylab="2. principal coordinate")
plot(res$vectors[,1], res$vectors[,2],pch=20, col=cutree(clusters,3), xlab="1. PCo", ylab="2. PCo")
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Dropbox/My Mac (CCI00BHV2JALT)/Documents/ADAP-KDP-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
clusterGroups<- cutree(clusters,k=3)
table(clusterGroups)
clust.centroid = function(i, dat, clusters) {
ind = (clusters == i)
colMeans(dat[ind,])
}
clusterGroups<- cutree(clusters,k=3)
clust.centroid(1,data,clusterGroups)
clust.centroid(1,testmat,clusterGroups)
clusterGroups
which(clusterGroups==1)
cluster1ind = sample(which(clusterGroups==1),1)
clusterind
cluster1ind
print(data[cluster1ind,])
print(data[cluster1ind])
print(d[cluster1ind])
print(d[cluster1ind,])
print(data[cluster2ind])
cluster2ind = sample(which(clusterGroups==2),1)
cluster3ind = sample(which(clusterGroups==3),1)
print(data[cluster1ind])
print(data[cluster2ind])
print(data[cluster3ind])
clusterGroups<- cutree(clusters,k=3)
cluster1ind = sample(which(clusterGroups==1),1)
cluster2ind = sample(which(clusterGroups==2),1)
cluster3ind = sample(which(clusterGroups==3),1)
print(data[cluster1ind])
print(data[cluster2ind])
print(data[cluster3ind])
head(data)
data[length(data)>2]
length(data[2])
length(data[which(data[length>2])])
length(data[which(data[length(data)>2])])
data[which(data>2)]
for (el in data):sum(el>2)
