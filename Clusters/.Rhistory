(90)*(255)/470
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PCoA_Plot.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PowerStudy/power_study_plot.R', echo=TRUE)
print(powvec)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/PowerStudy/power_study_plot.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
length(cluster)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
cluster
db
chi_pvalue(cluster,db,1000)
chisquare(cluster,db)
chi_pvalue = function(cluster,db,iter){
n = length(cluster)
m = length(db)
statdistr = c()
for (kk in 1:iter){
permutation = randperm(c(cluster,db), n+m)
sample1 = permutation[1:n]
sample2 = permutation[(n+1):(n+m)]
print(chisquare(sample1,sample2))
statdistr = c(statdistr, chisquare(sample1,sample2))
}
pvalue = length(statdistr[statdistr>=statobs])/iter
return(pvalue)
}
chi_pvalue(cluster,db,1000)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
d[,1]
d[,1] = d[,2]
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/SaveClusters.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/SaveClusters.R', echo=TRUE)
#Set the working dir
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
d = read.table(file = 'distributions2species.txt', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
setwd(this.dir)
d = read.table(file = 'distributions2species.txt', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
setwd("~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters")
d = read.table(file = 'distributions2species.txt', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
setwd("~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters")
d = read.table(file = 'distributions2species.txt', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/SaveClusters.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/SaveClusters.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/adap-kdp-gof-data/chi_square_p_values.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/SaveClusters.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/SaveClusters.R', echo=TRUE)
cl1
print(table(cl1))
unlist(cl1)
print(table(unlist(cl1)))
print(table(unlist(cl1)))/length(unlist(cl1))
hist(table(unlist(cl1)))/length(unlist(cl1))
as.vector(table(unlist(cl1)))/length(unlist(cl1))
length(cl1)
length(cl2)
length(cl3)
as.vector(table(unlist(cl2)))/length(unlist(cl2))
as.vector(table(unlist(cl3)))/length(unlist(cl3))
as.vector(table(unlist(cl4)))/length(unlist(cl4))
length(cl4)
length(cl5)
length(cl6)
as.vector(table(unlist(cl6)))/length(unlist(cl6))
table(unlist(list(cl1,cl2,cl3)))
table(unlist(list(cl1,cl2,cl3, cl6,cl5)))
as.vector(table(unlist(cl1)))/length(unlist(cl1))
table(unlist(cl1)))/length(unlist(cl1)
table(unlist(cl1)))/length(unlist(cl1))
table(unlist(cl1))/length(unlist(cl1)
print(table(unlist(cl1))/length(unlist(cl1))
print(table(unlist(cl1))/length(unlist(cl1)))
print(table(unlist(cl2))/length(unlist(cl2)))
print(table(unlist(cl3))/length(unlist(cl3)))
print(table(unlist(cl4))/length(unlist(cl4)))
print(table(unlist(cl6))/length(unlist(cl6)))
a = c(0, 0.013, 0.039, 0.041, 0.004, 0, 0.015, 0.025, 0.044, 0.008, 0.432, 0.240, 0.006, 0.034, 0.034, 0.025, 0.013, 0.021)
b = c(0, 0, 0, 0, 0, 0, 0.031, 0, 0, 0, 0.058, 0, 0.75, 0.031, 0.022, 0.084, 0.008, 0.008, 0.004)
c = c(0, 0, 0.032, 0.064516129, 0, 0, 0, 0.032258065, 0.361290323, 0, 0.135483871, 0.006451613, 0, 0.012903226, 0.316129032, 0.012903226, 0.006451613, 0.019354839)
d = c(0.205655527, 0, 0, 0, 0.015424165, 0, 0, 0, 0.023136247, 0.205655527, 0.205655527, 0.318766067, 0.007712082, 0, 0.017994859)
e = c(0, 0.01470588, 0.11764706, 0.45588235, 0, 0.04411765, 0.10294118, 0.05882353, 0, 0, 0, 0.08823529, 0.01470588, 0.02941176, 0.01470588, 0.05882353)
len(a)
length(a)
length(b)
length(c)
length(d)
length(e)
print(table(unlist(cl1))/length(unlist(cl1)))
print(table(unlist(cl3))/length(unlist(cl3)))
print(table(unlist(cl4))/length(unlist(cl4)))
print(table(unlist(cl6))/length(unlist(cl6)))
e = c(0, 0.01470588, 0.11764706, 0.45588235, 0, 0.04411765, 0.10294118, 0.05882353, 0, 0, 0, 0.08823529, 0, 0.01470588, 0.02941176, 0, 0.01470588, 0.05882353)
length(e)
length(a)
length(b)
a = c(0, 0.013, 0.039, 0.041, 0.004, 0, 0.015, 0.025, 0.044, 0.008, 0.432, 0, 0.240, 0.006, 0.034, 0.034, 0.025, 0.013, 0.021)
b = c(0, 0, 0, 0, 0, 0, 0.031, 0, 0, 0, 0.058, 0, 0.75, 0.031, 0.022, 0.084, 0.008, 0.008, 0.004)
c = c(0, 0, 0.032, 0.064516129, 0, 0, 0, 0.032258065, 0.361290323, 0, 0.135483871, 0, 0.006451613, 0, 0.012903226, 0.316129032, 0.012903226, 0.006451613, 0.019354839)
d = c(0.205655527, 0, 0, 0, 0.015424165, 0, 0, 0, 0.023136247, 0.205655527, 0.205655527, 0.318766067, 0.007712082, 0, 0.017994859, 0, 0, 0)
e = c(0, 0.01470588, 0.11764706, 0.45588235, 0, 0.04411765, 0.10294118, 0.05882353, 0, 0, 0, 0.08823529, 0, 0.01470588, 0.02941176, 0, 0.01470588, 0.05882353)
e = c(0, 0.01470588, 0.11764706, 0.45588235, 0, 0.04411765, 0.10294118, 0.05882353, 0, 0, 0, 0, 0.08823529, 0, 0.01470588, 0.02941176, 0, 0.01470588, 0.05882353)
length(e)
hist(a, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”, xlab=”Variable”)
hist(b, col=rgb(0,0,1,0.5), add=T)
box()
hist(a, col=rgb(1,0,0,0.5),xlim=c(0,19), ylim=c(0,1), main=”Overlapping Histogram”, xlab=”Variable”)
hist(a, col=rgb(1,0,0,0.5),xlim=c(0,19), ylim=c(0,1))
hist(b, col=rgb(0,0,1,0.5), add=T)
hist(a, col=rgb(1,0,0,0.5),xlim=c(0,19), ylim=c(0,1), freq=TRUE)
hist(b, col=rgb(0,0,1,0.5), add=T)
box()
hist(a, col=rgb(1,0,0,0.5),xlim=c(0,19), ylim=c(0,1), freq = F)
hist(b, col=rgb(0,0,1,0.5), add=T)
box()
plot(a)
plot(lines(a))
lines(a)
plot(a)
plot(a)
plot(b, col='red')
plot(b, col='red', add=TRUE)
plot(a)
plot(b, col='red', add=TRUE)
lines(b, col='red', add=TRUE)
lines(a)
lines(b, col='red', add=TRUE)
points(b, col='red', add=TRUE)
plot(a)
points(b, col='red', add=TRUE)
plot(a, xlab = "", ylab="")
points(b, col='red', add=TRUE, xlab = "", ylab="")
plot(a, xlab = "", ylab="")
plot(a, xlab = "", ylab="")
points(b, col='red', add=TRUE, xlab = "", ylab="")
points(c, col='blue', add=TRUE, xlab = "", ylab="")
points(d, col='green', add=TRUE, xlab = "", ylab="")
points(e, col='brown', add=TRUE, xlab = "", ylab="")
plot(a, xlab = "", ylab="")
points(b, col='red', add=TRUE, xlab = "", ylab="")
points(c, col='blue', add=TRUE, xlab = "", ylab="")
points(d, col='green', add=TRUE, xlab = "", ylab="")
points(e, col='yellow', add=TRUE, xlab = "", ylab="")
plot(a, xlab = "", ylab="")
points(b, col='red', add=TRUE, xlab = "", ylab="")
points(c, col='blue', add=TRUE, xlab = "", ylab="")
points(d, col='green', add=TRUE, xlab = "", ylab="")
points(e, col='orange', add=TRUE, xlab = "", ylab="")
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/Alternative_Plots.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/Alternative_Plots.R', echo=TRUE)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/Alternative_Plots.R', echo=TRUE)
len(cl1)
length(cl1)
length(cl2)
cl1 = list()
cl2 = list()
cl3 = list()
cl4 = list()
cl5 = list()
cl6 = list()
i=1
for (row in 2:nrow(d)){
cluster = strsplit(d[row,2], ',')[[1]]
if (length(cluster)>2){
if (mycl[i]==1){
cl1[[length(cl1)+1]] = cluster
}
if (mycl[i]==2){
cl2[[length(cl2)+1]] = cluster
}
if (mycl[i]==3){
cl3[[length(cl3)+1]] = cluster
}
if (mycl[i]==4){
cl4[[length(cl4)+1]] = cluster
}
if (mycl[i]==5){
cl5[[length(cl5)+1]] = cluster
}
if (mycl[i]==6){
cl6[[length(cl6)+1]] = cluster
}
i = i+1
}
}
print(table(unlist(cl6))/length(unlist(cl6)))
#species
#a = c(0, 0.013, 0.039, 0.041, 0.004, 0, 0.015, 0.025, 0.044, 0.008, 0.432, 0, 0.240, 0.006, 0.034, 0.034, 0.025, 0.013, 0.021)
#b = c(0, 0, 0, 0, 0, 0, 0.031, 0, 0, 0, 0.058, 0, 0.75, 0.031, 0.022, 0.084, 0.008, 0.008, 0.004)
#c = c(0, 0, 0.032, 0.064516129, 0, 0, 0, 0.032258065, 0.361290323, 0, 0.135483871, 0, 0.006451613, 0, 0.012903226, 0.316129032, 0.012903226, 0.006451613, 0.019354839)
#d = c(0.205655527, 0, 0, 0, 0.015424165, 0, 0, 0, 0.023136247, 0.205655527, 0.205655527, 0.318766067, 0.007712082, 0, 0.017994859, 0, 0, 0)
#e = c(0, 0.01470588, 0.11764706, 0.45588235, 0, 0.04411765, 0.10294118, 0.05882353, 0, 0, 0, 0, 0.08823529, 0, 0.01470588, 0.02941176, 0, 0.01470588, 0.05882353)
plot(a, xlab = "", ylab="")
points(b, col='red', add=TRUE, xlab = "", ylab="")
points(c, col='blue', add=TRUE, xlab = "", ylab="")
points(d, col='green', add=TRUE, xlab = "", ylab="")
points(e, col='orange', add=TRUE, xlab = "", ylab="")
length(cl1)
length(cl2)
length(cl3)
length*cl4
length(cl4)
length(cl5)
length(cl6)
print(table(unlist(cl1))/length(unlist(cl1)))
as.vector(print(table(unlist(cl1))/length(unlist(cl1))))
b =
as.vector(print(table(unlist(cl3))/length(unlist(cl3))))
b =
as.numeric(print(table(unlist(cl3))/length(unlist(cl3))))
b =
print(as.numeric(table(unlist(cl3))/length(unlist(cl3))))
a = as.vector(table(unlist(cl1))/length(unlist(cl1)))
b = c(0.018382353, 0, 0.040441176, 0.352941176, 0.007352941, 0, 0.033088235, 0.033088235, 0.066176471, 0.088235294, 0, 0, 0, 0.077205882, 0.040441176, 0.018382353, 0.084558824, 0, 0, 0, 0, 0.014705882, 0, 0.125000000)
length(a)
length(b)
print(as.numeric(table(unlist(cl4))/length(unlist(cl4))))
table(unlist(cl4))/length(unlist(cl4))
table(cl1)
tabke(unlist(cl1))
table(unlist(cl1))
print(table(unlist(cl4))/length(unlist(cl4)))
print(table(unlist(cl1))/length(unlist(cl1)))
b = c(0.018382353, 0, 0.040441176, 0.352941176, 0.007352941, 0, 0.033088235, 0.033088235, 0.066176471, 0.088235294, 0, 0, 0, 0.077205882, 0.040441176, 0.018382353, 0.084558824, 0, 0, 0, 0, 0.014705882, 0, 0.125000000)
c = c(0, 0.02857143, 0.22857143, 0, 0.02857143, 0, 0.20000000, 0, 0.25714286, 0, 0, 0, 0, 0.14285714, 0, 0.11428571, 0, 0, 0, 0, 0, 0, 0, 0)
length(c)
print(as.numeric(table(unlist(cl5))/length(unlist(cl5))))
print(table(unlist(cl5))/length(unlist(cl5)))
d = c(0.02941176 0.02941176 0.11764706 0.11764706, 0, 0, 0.05882353 0.05882353 0.20588235 0.11764706, 0, 0, 0, 0, 0.05882353, 0, 0.20588235, 0, 0, 0, 0, 0, 0, 0, 0)
d = c(0.02941176, 0.02941176, 0.11764706, 0.11764706, 0, 0, 0.05882353, 0.05882353, 0.20588235, 0.11764706, 0, 0, 0, 0, 0.05882353, 0, 0.20588235, 0, 0, 0, 0, 0, 0, 0, 0)
length(d)
d = c(0.02941176, 0.02941176, 0.11764706, 0.11764706, 0, 0, 0.05882353, 0.05882353, 0.20588235, 0.11764706, 0, 0, 0, 0, 0.05882353, 0, 0.20588235, 0, 0, 0, 0, 0, 0, 0)
print(as.numeric(table(unlist(cl6))/length(unlist(cl6))))
print(table(unlist(cl6))/length(unlist(cl6)))
print(table(unlist(cl1))/length(unlist(cl1)))
e = c(0.033057851, 0.033057851, 0.008264463, 0.049586777, 0.090909091, 0, 0.016528926, 0, 0.082644628, 0.404958678, 0, 0, 0, 0.099173554, 0.024793388, 0.074380165, 0.033057851, 0.008264463, 0.041322314, 0, 0)
length(e)
e = c(0.033057851, 0.033057851, 0.008264463, 0.049586777, 0.090909091, 0, 0.016528926, 0, 0.082644628, 0.404958678, 0, 0, 0, 0.099173554, 0.024793388, 0.074380165, 0, 0, 0, 0.033057851, 0.008264463, 0.041322314, 0, 0)
length(e)
a = as.vector(table(unlist(cl1))/length(unlist(cl1)))
b = c(0.018382353, 0, 0.040441176, 0.352941176, 0.007352941, 0, 0.033088235, 0.033088235, 0.066176471, 0.088235294, 0, 0, 0, 0.077205882, 0.040441176, 0.018382353, 0.084558824, 0, 0, 0, 0, 0.014705882, 0, 0.125000000)
c = c(0, 0.02857143, 0.22857143, 0, 0.02857143, 0, 0.20000000, 0, 0.25714286, 0, 0, 0, 0, 0.14285714, 0, 0.11428571, 0, 0, 0, 0, 0, 0, 0, 0)
d = c(0.02941176, 0.02941176, 0.11764706, 0.11764706, 0, 0, 0.05882353, 0.05882353, 0.20588235, 0.11764706, 0, 0, 0, 0, 0.05882353, 0, 0.20588235, 0, 0, 0, 0, 0, 0, 0)
e = c(0.033057851, 0.033057851, 0.008264463, 0.049586777, 0.090909091, 0, 0.016528926, 0, 0.082644628, 0.404958678, 0, 0, 0, 0.099173554, 0.024793388, 0.074380165, 0, 0, 0, 0.033057851, 0.008264463, 0.041322314, 0, 0)
plot(a, xlab = "", ylab="")
points(b, col='red', add=TRUE, xlab = "", ylab="")
points(c, col='blue', add=TRUE, xlab = "", ylab="")
points(d, col='green', add=TRUE, xlab = "", ylab="")
points(e, col='orange', add=TRUE, xlab = "", ylab="")
plot(a, xlab = "", ylab="")
points(b, col='red', add=TRUE, xlab = "", ylab="")
points(c, col='blue', add=TRUE, xlab = "", ylab="")
points(d, col='green', add=TRUE, xlab = "", ylab="")
points(e, col='orange', add=TRUE, xlab = "", ylab="")
a
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/Alternative_Plots.R', echo=TRUE)
a
cl1
cl2
cl3
cl4
cl5
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/Alternative_Plots.R', echo=TRUE)
head(d)
source('~/Documents/Git/ADAP-KDB-goodness-of-fit/Clusters/Alternative_Plots.R', echo=TRUE)
length(cl1)
length(cl2)
length(cl3)
length(c;4)
length(cl4)
length(cl5)
length(cl6)
cl1
table(unlist(cl1))
print(as.numeric(table(unlist(cl1))/length(unlist(cl1))))
table(unlist(cl2))
table(d[,2])
print(as.numeric(table(unlist(cl1))/length(unlist(cl1))))
c = c(0.5, 0, 0, 0, 0, 0, 0.1, 0.1, 0.15, 0.15)
length(c)
d = (0.3, 0, 0.3, 0.1, 0, 0.15, 0, 0, 0, 0.15)
d = c(0.3, 0, 0.3, 0.1, 0, 0.15, 0, 0, 0, 0.15)
length(d)
e = c(0, 0, 0, 0, 0, 0, 0.1, 0.1, 0.3, 0.5)
sum)e
sum(e)
sum(a)
sum(b)
sum()c
sum(c)
sum(d)
a = c(0.08593750, 0.03046875, 0.65312500, 0.02734375, 0.04453125, 0.02109375, 0.00234375, 0.02578125, 0.04218750, 0.06718750)
b = (0.2, 0, 0.4, 0, 0.1, 0.1, 0, 0, 0.05, 0.15)
c = c(0.5, 0, 0, 0, 0, 0, 0.1, 0.1, 0.15, 0.15)
d = c(0.3, 0, 0.3, 0.1, 0, 0.15, 0, 0, 0, 0.15)
e = c(0, 0, 0, 0, 0, 0, 0.1, 0.1, 0.3, 0.5)
#ss
#a = 0.0398873768 0.0220553731 0.0168934772 0.0755513843 0.4026278742 0.0079774754 0.0337869545 0.0286250587 0.0483341154 0.0314406382 0.0004692633 0.0187705303 0.0009385265 0.0408259033 0.0215861098 0.0811825434, 0.0431722196 0.0070389489 0.0009385265 0.0201783200 0.0028155795 0.0192397935 0.0178320038 0.0178320038
#b = c(0.018382353, 0, 0.040441176, 0.352941176, 0.007352941, 0, 0.033088235, 0.033088235, 0.066176471, 0.088235294, 0, 0, 0, 0.077205882, 0.040441176, 0.018382353, 0.084558824, 0, 0, 0, 0, 0.014705882, 0, 0.125000000)
#c = c(0, 0.02857143, 0.22857143, 0, 0.02857143, 0, 0.20000000, 0, 0.25714286, 0, 0, 0, 0, 0.14285714, 0, 0.11428571, 0, 0, 0, 0, 0, 0, 0, 0)
#d = c(0.02941176, 0.02941176, 0.11764706, 0.11764706, 0, 0, 0.05882353, 0.05882353, 0.20588235, 0.11764706, 0, 0, 0, 0, 0.05882353, 0, 0.20588235, 0, 0, 0, 0, 0, 0, 0)
#e = c(0.033057851, 0.033057851, 0.008264463, 0.049586777, 0.090909091, 0, 0.016528926, 0, 0.082644628, 0.404958678, 0, 0, 0, 0.099173554, 0.024793388, 0.074380165, 0, 0, 0, 0.033057851, 0.008264463, 0.041322314, 0, 0)
#species
#a = c(0, 0.013, 0.039, 0.041, 0.004, 0, 0.015, 0.025, 0.044, 0.008, 0.432, 0, 0.240, 0.006, 0.034, 0.034, 0.025, 0.013, 0.021)
#b = c(0, 0, 0, 0, 0, 0, 0.031, 0, 0, 0, 0.058, 0, 0.75, 0.031, 0.022, 0.084, 0.008, 0.008, 0.004)
#c = c(0, 0, 0.032, 0.064516129, 0, 0, 0, 0.032258065, 0.361290323, 0, 0.135483871, 0, 0.006451613, 0, 0.012903226, 0.316129032, 0.012903226, 0.006451613, 0.019354839)
#d = c(0.205655527, 0, 0, 0, 0.015424165, 0, 0, 0, 0.023136247, 0.205655527, 0.205655527, 0.318766067, 0.007712082, 0, 0.017994859, 0, 0, 0)
#e = c(0, 0.01470588, 0.11764706, 0.45588235, 0, 0.04411765, 0.10294118, 0.05882353, 0, 0, 0, 0, 0.08823529, 0, 0.01470588, 0.02941176, 0, 0.01470588, 0.05882353)
plot(a, xlab = "", ylab="")
points(b, col='red', add=TRUE, xlab = "", ylab="")
points(c, col='blue', add=TRUE, xlab = "", ylab="")
points(d, col='green', add=TRUE, xlab = "", ylab="")
points(e, col='orange', add=TRUE, xlab = "", ylab="")
